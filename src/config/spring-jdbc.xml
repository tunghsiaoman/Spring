<?xml version="1.0" encoding = "UTF-8" ?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
    
    <!-- Spring JDBC -->
    <!-- 配置数据源（C3P0） -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    	<property name="driverClass" value="${jdbc.c3p0.driverClassName}" />
    	<property name="jdbcUrl" value="${jdbc.c3p0.jdbcUrl}" />
    	<property name="user" value="${jdbc.c3p0.username}" />
    	<property name="password" value="${jdbc.c3p0.password}" />
    	<!-- 连接池中保留的最小连接数 Default : 5 -->
    	<property name="minPoolSize" value="${jdbc.c3p0.minPoolSize}"/>
    	<!-- 连接池中保留的最大连接数 Default : 15 -->
    	<property name="maxPoolSize" value="${jdbc.c3p0.maxPoolSize}" />
    	<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间 Default: 3 -->
    	<property name="initialPoolSize" value="${jdbc.c3p0.initialPoolSize}" />
    	<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃  Default: 0 -->
    	<property name="maxIdleTime" value="${jdbc.c3p0.maxIdleTime}" />
    	<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  Default: 3 -->
    	<property name="acquireIncrement" value="${jdbc.c3p0.acquireIncrement}" />
    	<!--
    		JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
        	属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
        	如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
       	-->
       	<property name="maxStatements" value="${jdbc.c3p0.maxStatements}" />
       	<!--每60秒检查所有连接池中的空闲连接 Default: 0 --> 
       	<property name="idleConnectionTestPeriod" value="${jdbc.c3p0.idleConnectionTestPeriod}" />
       	<!--定义在从数据库获取新连接失败后重复尝试的次数 Default: 30 -->
       	<property name="acquireRetryAttempts" value="${jdbc.c3p0.acquireRetryAttempts}" />
       	<!-- 
       		获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效   
            保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试   
            获取连接失败后该数据源将申明已断开并永久关闭 Default: false 
        -->
        <property name="breakAfterAcquireFailure" value="${jdbc.c3p0.breakAfterAcquireFailure}" />
        <!--
        	因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的   
         	时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable   
         	等方法来提升连接测试的性能。Default: false 
        -->
        <property name="testConnectionOnCheckout" value="${jdbc.c3p0.testConnectionOnCheckout}" />
    </bean>
    
    <!-- 配置 JDBC 模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 配置事物管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 通过AOP配置提供事物增强，让service包下所有Bean的所有方法拥有事物 -->
    <!-- 
    <aop:config proxy-target-class="true">
    	<aop:pointcut id="serviceMethod" expression=" execution(* com.project.service..*(..))"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
    		<tx:method name="*"/>
    	</tx:attributes>
    </tx:advice>
     -->
    
    
    
</beans>